package pt.continente.review.tables;

import java.util.ArrayList;
import java.util.List;

import pt.continente.review.common.Common;
import pt.continente.review.common.Dimension;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.util.Log;

public class DimensionsTable {

	// Debugging tag
	private static final String TAG = "CntRev - DimensionsTable";

	/**
	 * Defines the internal exceptions that can be thrown by the class
	 */
	public static final class exceptions {
		public static final String DB_HELPER_ERROR = "Error opening DB helper";
		public static final String WRITABLE_DB_ERROR = "Error capturing a writable DB";
	}

	public static final String TABLE_NAME = "Dimensions";
	public static final String COLUMN_DIMENSION_ID = "dimension_id";
	public static final String COLUMN_DIMENSION_NAME = "dimension_name";
	public static final String COLUMN_DIMENSION_LABEL = "dimension_label";
	public static final String COLUMN_DIMENSION_MIN = "dimension_min";
	public static final String COLUMN_DIMENSION_MED = "dimension_med";
	public static final String COLUMN_DIMENSION_MAX = "dimension_max";
	public static final int COLUMN_COUNT = 6;
	
	// Database fields
	private SQLiteDatabase database;
	private SQLiteHelper dbHelper;
	private String[] allColumns = {
			COLUMN_DIMENSION_ID,
			COLUMN_DIMENSION_NAME,
			COLUMN_DIMENSION_LABEL,
			COLUMN_DIMENSION_MIN,
			COLUMN_DIMENSION_MED,
			COLUMN_DIMENSION_MAX
			};
	
	
	
	
	public DimensionsTable(SQLiteHelper helper) throws Exception {
		try {
			dbHelper = helper;
		} catch (SQLException e) {
			Log.i(TAG, "DimensionsTable: error opening the DB helper - " + e.getMessage());
			throw new Exception(exceptions.DB_HELPER_ERROR);
		}
	}
	
	
	public void open() throws Exception {
		try {
			database = dbHelper.getWritableDatabase();
		} catch (SQLiteException e) {
			Log.i(TAG, "open: error getting writable database - " + e.getMessage());
			throw new Exception(exceptions.WRITABLE_DB_ERROR);
		}
	}	
	
	public void close() {
		database.close();
	}
	
	
	
	
	public Dimension getItem(long itemId) {

		Dimension newItem = null;
		
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_DIMENSION_ID + "=" + itemId, null, null, null, null);
	    
	    int cursorRows = cursor.getCount();
	    if (cursorRows <= 0) {
	    	Common.log(1, TAG, "getItem: no line found with Id " + itemId);
	    	return null;
	    } else if (cursorRows > 1) {
	    	Common.log(1, TAG, "getItem: Id " + itemId + " returned " + cursorRows + " rows");
	    	return null;
	    } else {
	    	cursor.moveToNext();
	    	newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Log.i(TAG, "getItem: couldn't create Object");
	    		return null;
	    	}
	    }
	    cursor.close();
	    return newItem;
	}

	
	public List<Dimension> getAllItems() {

		List<Dimension> item = new ArrayList<Dimension>();
	
	    Cursor cursor = database.query(TABLE_NAME, allColumns, null, null, null, null, null);
	    
    	cursor.moveToNext();
    	while (!cursor.isAfterLast()) {
    		Dimension newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Common.log(1, TAG, "getAllItems: couldn't create Object for itemId " + cursor.getLong(cursor.getColumnIndex(COLUMN_DIMENSION_ID)));
	    	} else {
	    		item.add(newItem);
	    	}
	    	cursor.moveToNext();
    	}

	    cursor.close();
	    
	    return item;
	}

	
	/**
	 * @return
	 * the <b>id</b> generated by the table (should be added to the supplied Object)<br>
	 * <b>-1</b> if the supplied object does not contain proper data<br>
	 * <b>-2</b> if the supplied object already exists<br>
	 * <b>-3</b> if there was a general error adding to the table
	 */
	public long addItem(Dimension item) {
		
		Common.log(5, TAG, "addItem: entrou");

		if (!item.isFullyDefined()) {
			Common.log(1, TAG, "addItem: the supplied item is not fully defined");
			return -1;
		}
		
		Common.log(5, TAG, "addItem: vai procurar o device");

		if (findItem(item.getName()) != -1) {
			Common.log(1, TAG, "addItem: an item for same content already exists");
			return -2;
		}
		
	    ContentValues values = new ContentValues();
	    
	    values.put(COLUMN_DIMENSION_ID, item.getId());
	    values.put(COLUMN_DIMENSION_NAME, item.getName());
	    values.put(COLUMN_DIMENSION_LABEL, item.getLabel());
	    values.put(COLUMN_DIMENSION_MIN, item.getMin());
	    values.put(COLUMN_DIMENSION_MED, item.getMed());
	    values.put(COLUMN_DIMENSION_MAX, item.getMax());
		
		Common.log(5, TAG, "addItem: vai tentar carregar registo na db");
	    long deviceId = database.insert(TABLE_NAME, null, values);
	    if(deviceId == -1) {
	    	Log.i(TAG, "addItem: couldn't insert new Device into table");
			return -3;
	    }
	    
		Common.log(5, TAG, "addItem: vai sair");
	    return deviceId;
	}
	

	public boolean updateItem(Dimension updatedItem) {
		
		if (!updatedItem.isFullyDefined()) {
			Log.i(TAG, "updateAction: the supplied Object is not defined as expected");
			return false;
		}
		
		long itemIdToUpdate = updatedItem.getId();
		
		if (findItem(updatedItem.getName()) != itemIdToUpdate) {
			Log.i(TAG, "updateDevice: the update would generate duplicate devices");
			return false;
		}
		
	    ContentValues values = new ContentValues();
	    
	    values.put(COLUMN_DIMENSION_ID, updatedItem.getId());
	    values.put(COLUMN_DIMENSION_NAME, updatedItem.getName());
	    values.put(COLUMN_DIMENSION_LABEL, updatedItem.getLabel());
	    values.put(COLUMN_DIMENSION_MIN, updatedItem.getMin());
	    values.put(COLUMN_DIMENSION_MED, updatedItem.getMed());
	    values.put(COLUMN_DIMENSION_MAX, updatedItem.getMax());
	    
	    int recordsAffected = database.update(TABLE_NAME, values, COLUMN_DIMENSION_ID + "=" + itemIdToUpdate, null);
	    if(recordsAffected <= 0) {
	    	Common.log(1, TAG, "updateDevice: couldn't update table for Object with Id " + itemIdToUpdate);
			return false;
	    } else if(recordsAffected > 1) {
	    	Common.log(3, TAG, "updateDevice: more than one line have been changed by Object with Id " + itemIdToUpdate);
	    }
	    
	    return true;
	}
	
	
	public int deleteItem (Dimension item) {
		long itemIdToDelete = item.getId();
		int rowsAffected = database.delete(TABLE_NAME, COLUMN_DIMENSION_ID + "=" + itemIdToDelete, null);
		Common.log(5, TAG, "deleteDevice: deleted " + rowsAffected + " rows with deviceId " + itemIdToDelete);
		return rowsAffected;
	}

	
	/**
	 * @return
	 * <i><b>int</b></i> with number of rows affected
	 * <b>-1</b> if failed to read number of rows prior to deleting
	 * <b>-2</b> if no rows where deleted
	 * <b>-3</b> if not all rows where deleted
	 */
	public int deleteAllItems () {
		int rowsAvailable = getNumberOfRows();
		Common.log(5, TAG, "deleteAllItems: rows available = " + rowsAvailable);
		
		if (rowsAvailable < 0) {
			Log.i(TAG, "deleteAllItems: failed to read number of rows");
			return -1;
		}
		int rowsAffected = database.delete(TABLE_NAME, "1", null);

		Common.log(5, TAG, "deleteAllItems: apagou " + rowsAffected + " linhas");
		if (rowsAffected == rowsAvailable) {
			Common.log(5, TAG, "deleteAllItems: deleted " + rowsAffected + " rows (all)");
			return rowsAffected;
		} else if (rowsAffected == 0) {
			Log.i(TAG, "deleteAllItems: could not delete any rows");
			return -2;
		} else {
			Log.i(TAG, "deleteAllItems: not all rows where deleted (only " + rowsAffected + " out of " + rowsAvailable);
			return -3;
		}
	}

	/**
	 * @return
	 * <i><b>int</b></i> with number of rows in table
	 * <b>-1</b> if failed to count rows
	 */
	private int getNumberOfRows() {
		Cursor cursor;
		int numLines;
		
		Common.log(5, TAG, "getNumberOfRows: entrou");
		
		try {
			cursor = database.query(TABLE_NAME, new String[] { COLUMN_DIMENSION_ID }, null, null, null, null, null);
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (1) - " + e.getMessage());
			return -1;
		}
		
		try {
	    	numLines = 0;
			cursor.moveToNext();
	    	while (!cursor.isAfterLast()) {
	    		numLines++;
	    		cursor.moveToNext();
	    	}
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (2) - " + e.getMessage());
			return -1;
		}

		try {
		    cursor.close();
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (3) - " + e.getMessage());
			return -1;
		}
		
		return numLines;
	}
	
	private Dimension cursorToObject(Cursor cursor) {
		
	    Dimension newItem = null;
	    
	    if (cursor.getColumnCount() != COLUMN_COUNT) {
		    Common.log(1, TAG, "cursorToObject: column count different from expected: " + cursor.getColumnCount() + " vs. " + COLUMN_COUNT);
	    	return null;
	    }
	    
	    try {
	    	newItem = new Dimension(
	    			cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_ID)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_NAME)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_LABEL)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_MIN)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_MED)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DIMENSION_MAX))
	    			);
	    } catch (Exception e) {
		    Common.log(1, TAG, "cursorToObject: could not create new Object");
	    	return null;
	    }
		
	    return newItem;
	}

	
	
	
	/**
	 * @param deviceId
	 * @param function
	 * @return
	 * A positive long representing a Device deviceId identifying the line that matches the input<br>
	 * <b>-1</b> if no lines match the input<br>
	 * <b>-2</b> if more than one line matches the input<br>
	 * <b>-3</b> if only one device was found but couldn't create the KNXDevice object
	 */
	public long findItem(String itemName) {
		
		Common.log(5, TAG, "findItem: started");

		Dimension newItem = null;
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_DIMENSION_NAME + "='" + itemName + "'", null, null, null, null);
	    
		int cursorRows = cursor.getCount();
		
		Common.log(5, TAG, "findItem: found " + cursorRows + " lines");
	    if (cursorRows <= 0) {
	    	Common.log(5, TAG, "findItem: Item with Name '" + itemName + "' does not exist");
	    	return -1;
	    } else if (cursorRows > 1) {
	    	Log.i(TAG, "findItem: more than one Item with name " + itemName + " exists");
	    	return -2;
	    } else {
	    	cursor.moveToNext();
	    	newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Log.i(TAG, "findItem: couldn't create Object");
	    		return -3;
	    	}
	    }

	    cursor.close();
		return newItem.getId();
	}

}
