package pt.continente.review.tables;

import java.util.ArrayList;
import java.util.List;

import pt.continente.review.common.Common;
import pt.continente.review.common.ReviewImage;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.util.Log;

public class ReviewImagesTable {

	// Debugging tag
	private static final String TAG = "CntRev - ReviewImagesTable";
	
	/**
	 * Defines the internal exceptions that can be thrown by the class
	 */
	public static final class exceptions {
		public static final String DB_HELPER_ERROR = "Error opening DB helper";
		public static final String WRITABLE_DB_ERROR = "Error capturing a writable DB";
	}
	
	public static final String TABLE_NAME = "ReviewImages";
	public static final String COLUMN_IMAGE_ID = "_id";
	public static final String COLUMN_REVIEW_ID = "review_id";
	public static final String COLUMN_REVIEW_IMAGE = "review_image";
	public static final int COLUMN_COUNT = 3;
	
	// Database fields
	private SQLiteDatabase database;
	private SQLiteHelper dbHelper;
	private String[] allColumns = {
			COLUMN_IMAGE_ID,
			COLUMN_REVIEW_ID,
			COLUMN_REVIEW_IMAGE
			};
	
	
	
	public ReviewImagesTable(SQLiteHelper helper) throws Exception {
		try {
			dbHelper = helper;
		} catch (SQLException e) {
			Log.i(TAG, "ReviewsTable: error opening the DB helper - " + e.getMessage());
			throw new Exception(exceptions.DB_HELPER_ERROR);
		}
	}
	
	
	public void open() throws Exception {
		try {
			database = dbHelper.getWritableDatabase();
		} catch (SQLiteException e) {
			Log.i(TAG, "open: error getting writable database - " + e.getMessage());
			throw new Exception(exceptions.WRITABLE_DB_ERROR);
		}
	}	
	
	
	public void close() {
		database.close();
	}
	
	
	public List<ReviewImage> getItems(long reviewId) {

		List<ReviewImage> item = new ArrayList<ReviewImage>();
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_REVIEW_ID + "=" + reviewId, null, null, null, null);
	    
    	cursor.moveToNext();
    	while (!cursor.isAfterLast()) {
    		ReviewImage newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Common.log(1, TAG, "getAllItems: couldn't create Object for itemId " + cursor.getLong(cursor.getColumnIndex(COLUMN_REVIEW_ID)));
	    	} else {
	    		item.add(newItem);
	    	}
	    	cursor.moveToNext();
    	}
	    cursor.close();
	    
	    return item;
	}

	
	/**
	 * @return
	 * the <b>item</b> generated by the table (should be added to the supplied Object)<br>
	 * <b>-1</b> if the supplied device does not contain proper data<br>
	 * <b>-2</b> if there was a general error adding to the table
	 */
	public long addItem(ReviewImage item) {
		
		Common.log(5, TAG, "addItem: entrou");
		
		if (item.isFullyDefined()) {
			if(updateItem(item))
				return item.getId();
			return -3;
		}
		
		
		if (!item.isFullyDefinedExceptId()) {
			Common.log(1, TAG, "addItem: the supplied item is not fully defined (except id)");
			return -1;
		}
		
	    ContentValues values = new ContentValues();
	    
	    values.put(COLUMN_REVIEW_ID, item.getRevId());
	    values.put(COLUMN_REVIEW_IMAGE, Common.imageToBlob(item.getImage()));
	    
		Common.log(5, TAG, "addItem: vai tentar carregar registo na db");
	    long deviceId = database.insert(TABLE_NAME, null, values);
	    if(deviceId == -1) {
	    	Log.i(TAG, "addItem: couldn't insert new Device into table");
			return -2;
	    }
	    
		Common.log(5, TAG, "addItem: vai sair");
	    return deviceId;
	}
	
	
	public boolean updateItem(ReviewImage updatedItem) {
		
		if (!updatedItem.isFullyDefined()) {
			Log.i(TAG, "updateItem: the supplied devices are not defined as expected");
			return false;
		}
		
		long itemIdToUpdate = updatedItem.getId();
		
	    ContentValues values = new ContentValues();
	    values.put(COLUMN_IMAGE_ID, updatedItem.getId());
	    values.put(COLUMN_REVIEW_ID, updatedItem.getRevId());
	    values.put(COLUMN_REVIEW_IMAGE, Common.imageToBlob(updatedItem.getImage()));

	    int recordsAffected = database.update(TABLE_NAME, values, COLUMN_REVIEW_ID + "=" + itemIdToUpdate, null);
	    if(recordsAffected <= 0) {
	    	Common.log(1, TAG, "updateDevice: couldn't update table for Object with Id " + itemIdToUpdate);
			return false;
	    } else if(recordsAffected > 1) {
	    	Common.log(3, TAG, "updateDevice: more than one line have been changed by Object with Id " + itemIdToUpdate);
	    }
	    
	    return true;
	}

	
	public int deleteItem(long imgId) {
		int rowsAffected = database.delete(TABLE_NAME, COLUMN_IMAGE_ID + "=" + imgId, null);
		Common.log(5, TAG, "deleteItems: deleted " + rowsAffected + " rows with ID " + imgId);
		return rowsAffected;
	}

	
	public int deleteItems(long revId) {
		int rowsAffected = database.delete(TABLE_NAME, COLUMN_REVIEW_ID + "=" + revId, null);
		Common.log(5, TAG, "deleteItems: deleted " + rowsAffected + " rows with ID " + revId);
		return rowsAffected;
	}

	
	/**
	 * @return
	 * <i><b>int</b></i> with number of rows affected
	 * <b>-1</b> if failed to read number of rows prior to deleting
	 * <b>-2</b> if no rows where deleted
	 * <b>-3</b> if not all rows where deleted
	 */
	public int deleteAllItems () {
		int rowsAvailable = getNumberOfRows();
		Common.log(5, TAG, "deleteAllItems: rows available = " + rowsAvailable);
		
		if (rowsAvailable < 0) {
			Log.i(TAG, "deleteAllItems: failed to read number of rows");
			return -1;
		}
		int rowsAffected = database.delete(TABLE_NAME, "1", null);

		Common.log(5, TAG, "deleteAllItems: apagou " + rowsAffected + " linhas");
		if (rowsAffected == rowsAvailable) {
			Common.log(5, TAG, "deleteAllItems: deleted " + rowsAffected + " rows (all)");
			return rowsAffected;
		} else if (rowsAffected == 0) {
			Log.i(TAG, "deleteAllItems: could not delete any rows");
			return -2;
		} else {
			Log.i(TAG, "deleteAllItems: not all rows where deleted (only " + rowsAffected + " out of " + rowsAvailable);
			return -3;
		}
	}

	
	/**
	 * @return
	 * <i><b>int</b></i> with number of rows in table
	 * <b>-1</b> if failed to count rows
	 */
	private int getNumberOfRows() {
		Cursor cursor;
		int numLines;
		
		Common.log(5, TAG, "getNumberOfRows: entrou");
		
		try {
			cursor = database.query(TABLE_NAME, new String[] { COLUMN_REVIEW_ID }, null, null, null, null, null);
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (1) - " + e.getMessage());
			return -1;
		}
		
		try {
	    	numLines = 0;
			cursor.moveToNext();
	    	while (!cursor.isAfterLast()) {
	    		numLines++;
	    		cursor.moveToNext();
	    	}
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (2) - " + e.getMessage());
			return -1;
		}

		try {
		    cursor.close();
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (3) - " + e.getMessage());
			return -1;
		}
		
		return numLines;
	}
	
	
	private ReviewImage cursorToObject(Cursor cursor) {
		
		ReviewImage newItem = null;
	    
	    if (cursor.getColumnCount() != COLUMN_COUNT) {
		    Common.log(1, TAG, "cursorToObject: column count different from expected: " + cursor.getColumnCount() + " vs. " + COLUMN_COUNT);
	    	return null;
	    }
	    
	    try {
			newItem = new ReviewImage(
				cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_IMAGE_ID)),
				cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_ID)),
				Common.blobToImage(cursor.getBlob(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_IMAGE)))
				);
	    } catch (Exception e) {
		    Common.log(1, TAG, "cursorToObject: could not create new Object");
	    	return null;
	    }
		
	    return newItem;
	}
	
}