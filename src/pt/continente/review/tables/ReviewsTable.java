package pt.continente.review.tables;

import java.util.ArrayList;
import java.util.List;

import pt.continente.review.common.Common;
import pt.continente.review.common.Review;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.util.Log;

public class ReviewsTable {

	// Debugging tag
	private static final String TAG = "CntRev - ReviewsTable";

	/**
	 * Defines the internal exceptions that can be thrown by the class
	 */
	public static final class exceptions {
		public static final String DB_HELPER_ERROR = "Error opening DB helper";
		public static final String WRITABLE_DB_ERROR = "Error capturing a writable DB";
	}

	public static final String TABLE_NAME = "Reviews";
	public static final String COLUMN_REVIEW_ID = "_id";
	public static final String COLUMN_REVIEW_STATE = "review_state";
	public static final String COLUMN_REVIEW_ARTICLE_ID = "review_article_id";
	public static final String COLUMN_REVIEW_COMMENT = "review_comment";
	public static final int COLUMN_COUNT = 4;
	
	// Database fields
	private SQLiteDatabase database;
	private boolean usingExternalDB = false;
	private SQLiteHelper dbHelper;
	private String[] allColumns = {
			COLUMN_REVIEW_ID,
			COLUMN_REVIEW_STATE,
			COLUMN_REVIEW_ARTICLE_ID,
			COLUMN_REVIEW_COMMENT
			};
	
	
	
	
	public ReviewsTable(SQLiteHelper helper) throws Exception {
		this(helper, null);
	}
		
	public ReviewsTable(SQLiteHelper helper, SQLiteDatabase originDB) throws Exception {
		try {
			dbHelper = helper;
			database = originDB;
			if(originDB != null)
				usingExternalDB = true;
		} catch (SQLException e) {
			Log.i(TAG, "ReviewsTable: error opening the DB helper - " + e.getMessage());
			throw new Exception(exceptions.DB_HELPER_ERROR);
		}
	}
	
	
	public void open() throws Exception {
		if(!usingExternalDB) {
			try {
				database = dbHelper.getWritableDatabase();
			} catch (SQLiteException e) {
				Log.i(TAG, "open: error getting writable database - " + e.getMessage());
				throw new Exception(exceptions.WRITABLE_DB_ERROR);
			}
		}
	}	
	
	public void close() {
		if(!usingExternalDB) {
			database.close();
		}
	}
	
	
	
	
	public Review getItem(int rowPosition) {

		Review newItem = null;
	
	    Cursor cursor = database.query(TABLE_NAME, allColumns, null, null, null, null, null);
	    
	    if (cursor.moveToPosition(rowPosition)) {
	    	newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Log.i(TAG, "getItem: couldn't create Object from data at line " + rowPosition);
	    		return null;
	    	}
	    } else {
	    	Log.i(TAG, "getItem: position " + rowPosition + " does not exist");
	    }

	    cursor.close();
	    
	    return newItem;
	}

	
	public Review getItem(long itemId) {

		Review newItem = null;
	
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_REVIEW_ID + "=" + itemId, null, null, null, null);
	    
	    int cursorRows = cursor.getCount();
	    if (cursorRows <= 0) {
	    	Common.log(1, TAG, "getItem: no line found with Id " + itemId);
	    	return null;
	    } else if (cursorRows > 1) {
	    	Common.log(1, TAG, "getItem: Id " + itemId + " returned " + cursorRows + " rows");
	    	return null;
	    } else {
	    	cursor.moveToNext();
	    	newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Log.i(TAG, "getItem: couldn't create Object");
	    		return null;
	    	}
	    }

	    cursor.close();
	    
	    return newItem;
	}

	
	public List<Review> getAllItemsByState(int state) {

		List<Review> item = new ArrayList<Review>();
		
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_REVIEW_STATE + "=" + state, null, null, null, null);
	    
    	cursor.moveToNext();
    	while (!cursor.isAfterLast()) {
    		Review newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Common.log(1, TAG, "getAllItemsByState: couldn't create Object for itemId " + cursor.getLong(cursor.getColumnIndex(COLUMN_REVIEW_ID)));
	    	} else {
	    		item.add(newItem);
	    	}
	    	cursor.moveToNext();
    	}

	    cursor.close();
	    return item;
	}

	
	public List<Review> getAllItems() {

		List<Review> item = new ArrayList<Review>();
	
	    Cursor cursor = database.query(TABLE_NAME, allColumns, null, null, null, null, null);
	    
    	cursor.moveToNext();
    	while (!cursor.isAfterLast()) {
    		Review newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Common.log(1, TAG, "getAllItems: couldn't create Object for itemId " + cursor.getLong(cursor.getColumnIndex(COLUMN_REVIEW_ID)));
	    	} else {
	    		item.add(newItem);
	    	}
	    	cursor.moveToNext();
    	}

	    cursor.close();
	    
	    return item;
	}

	
	/**
	 * @param device the KNXDevice to be added to the table
	 * @return
	 * the <b>device id</b> generated by the table (should be added to the supplied Object)<br>
	 * <b>-1</b> if the supplied object does not contain proper data<br>
	 * <b>-2</b> if the supplied object already exists<br>
	 * <b>-3</b> if there was a general error adding to the table
	 */
	public long addItem(Review item) {
		Common.log(5, TAG, "addItem: entrou");

		if (!item.isFullyDefinedExceptId()) {
			Common.log(1, TAG, "addItem: the supplied item is not fully defined (except id)");
			return -1;
		}
		
		Common.log(5, TAG, "addItem: vai verificar se o item já existe na tabela");
		if (findItemFromActive(item.getArticleId()) != -1) {
			Common.log(1, TAG, "addItem: an item for same content already exists");
			return -2;
		}
		
	    ContentValues values = new ContentValues();
	    
	    values.put(COLUMN_REVIEW_STATE, item.getState());
	    values.put(COLUMN_REVIEW_ARTICLE_ID, item.getArticleId());
	    values.put(COLUMN_REVIEW_COMMENT, item.getComment());
	    
		Common.log(5, TAG, "addItem: vai tentar carregar registo na db");
	    long deviceId = database.insert(TABLE_NAME, null, values);
	    if(deviceId == -1) {
	    	Log.i(TAG, "addItem: couldn't insert new Device into table");
			return -3;
	    }
	    
		Common.log(5, TAG, "addItem: vai sair");
	    return deviceId;
	}
	

	public boolean updateItem(Review item) {
		Common.log(5, TAG, "updateItem: started");
		
		if (!item.isFullyDefined()) {
			Log.i(TAG, "updateAction: the supplied item is not defined as expected");
			return false;
		}
		
		long itemIdToUpdate = item.getId();
		
		if (findItemFromActive(item.getArticleId()) != itemIdToUpdate) {
			Log.i(TAG, "updateDevice: the update would generate duplicate devices");
			return false;
		}
		
	    ContentValues values = new ContentValues();
	    
	    values.put(COLUMN_REVIEW_STATE, item.getState());
	    values.put(COLUMN_REVIEW_ARTICLE_ID, item.getArticleId());
	    values.put(COLUMN_REVIEW_COMMENT, item.getComment());
	    
	    int recordsAffected = database.update(TABLE_NAME, values, COLUMN_REVIEW_ID + "=" + itemIdToUpdate, null);
	    if(recordsAffected <= 0) {
	    	Common.log(1, TAG, "updateDevice: couldn't update table for Object with Id " + itemIdToUpdate);
			return false;
	    } else if(recordsAffected > 1) {
	    	Common.log(3, TAG, "updateDevice: more than one line have been changed by Object with Id " + itemIdToUpdate);
	    }
	    
		Common.log(5, TAG, "updateItem: finished successfuly");
	    return true;
	}
	
	
	public int deleteItem (Review item) {
		long itemIdToDelete = item.getId();
		int rowsAffected = database.delete(TABLE_NAME, COLUMN_REVIEW_ID + "=" + itemIdToDelete, null);
		Common.log(5, TAG, "deleteDevice: deleted " + rowsAffected + " rows with deviceId " + itemIdToDelete);
		return rowsAffected;
	}

	
	/**
	 * @return
	 * <i><b>int</b></i> with number of rows affected
	 * <b>-1</b> if failed to read number of rows prior to deleting
	 * <b>-2</b> if no rows where deleted
	 * <b>-3</b> if not all rows where deleted
	 */
	public int deleteAllItems () {
		int rowsAvailable = getNumberOfRows();
		Common.log(5, TAG, "deleteAllItems: rows available = " + rowsAvailable);
		
		if (rowsAvailable < 0) {
			Log.i(TAG, "deleteAllItems: failed to read number of rows");
			return -1;
		}
		int rowsAffected = database.delete(TABLE_NAME, "1", null);

		Common.log(5, TAG, "deleteAllItems: apagou " + rowsAffected + " linhas");
		if (rowsAffected == rowsAvailable) {
			Common.log(5, TAG, "deleteAllItems: deleted " + rowsAffected + " rows (all)");
			return rowsAffected;
		} else if (rowsAffected == 0) {
			Log.i(TAG, "deleteAllItems: could not delete any rows");
			return -2;
		} else {
			Log.i(TAG, "deleteAllItems: not all rows where deleted (only " + rowsAffected + " out of " + rowsAvailable);
			return -3;
		}
	}

	/**
	 * @return
	 * <i><b>int</b></i> with number of rows in table
	 * <b>-1</b> if failed to count rows
	 */
	private int getNumberOfRows() {
		Cursor cursor;
		int numLines;
		
		Common.log(5, TAG, "getNumberOfRows: entrou");
		
		try {
			cursor = database.query(TABLE_NAME, new String[] { COLUMN_REVIEW_ID }, null, null, null, null, null);
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (1) - " + e.getMessage());
			return -1;
		}
		
		try {
	    	numLines = 0;
			cursor.moveToNext();
	    	while (!cursor.isAfterLast()) {
	    		numLines++;
	    		cursor.moveToNext();
	    	}
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (2) - " + e.getMessage());
			return -1;
		}

		try {
		    cursor.close();
		} catch (Exception e) {
			Log.i(TAG, "getNumberOfRows: error counting rows (3) - " + e.getMessage());
			return -1;
		}
		
		return numLines;
	}
	
	private Review cursorToObject(Cursor cursor) {
		
	    Review newItem = null;
	    
	    if (cursor.getColumnCount() != COLUMN_COUNT) {
		    Common.log(1, TAG, "cursorToObject: column count different from expected: " + cursor.getColumnCount() + " vs. " + COLUMN_COUNT);
	    	return null;
	    }
	    
	    try {
	    	newItem = new Review(
	    			cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_ID)),
	    			cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_STATE)),
	    			cursor.getLong(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_ARTICLE_ID)),
	    			cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_REVIEW_COMMENT))
	    			);
	    } catch (Exception e) {
		    Common.log(1, TAG, "cursorToObject: could not create new Object");
	    	return null;
	    }
		
	    return newItem;
	}

	
	
	
	/**
	 * @return
	 * <b>ID</b> of the line that matches the input (if only one does)<br>
	 * <b>-1</b> if no lines match the input<br>
	 * <b>-2</b> if more than one line match the input<br>
	 * <b>-3</b> if only one device was found but couldn't create the object in order to find the ID
	 */
	public long findItem(long itemId) {
		Common.log(5, TAG, "findItem: started");
		return findItemBase(itemId, "");
	}

	/**
	 * @return
	 * <b>ID</b> of the line that matches the input (if only one does)<br>
	 * <b>-1</b> if no lines match the input<br>
	 * <b>-2</b> if more than one line match the input<br>
	 * <b>-3</b> if only one device was found but couldn't create the object in order to find the ID
	 */
	public long findItemFromActive(long itemId) {
		Common.log(5, TAG, "findItemFromActive: started");
		return findItemBase(itemId, " AND " + COLUMN_REVIEW_STATE + "<" + Common.revStates.COMPLETED);
	}

	public long findItemBase(long itemId, String additionalConditions) {

		Review newItem = null;
	    Cursor cursor = database.query(TABLE_NAME, allColumns, COLUMN_REVIEW_ARTICLE_ID + "='" + itemId + "'" + additionalConditions, null, null, null, null);
	    
		int cursorRows = cursor.getCount();
		
		Common.log(5, TAG, "findItem: found " + cursorRows + " lines");
	    if (cursorRows <= 0) {
	    	Common.log(5, TAG, "findItem: Item with ID '" + itemId + "' does not exist");
	    	return -1;
	    } else if (cursorRows > 1) {
	    	Log.i(TAG, "findItem: more than one Item with name " + itemId + " exists");
	    	return -2;
	    } else {
	    	cursor.moveToNext();
	    	newItem = cursorToObject(cursor);
	    	if (newItem == null) {
	    		Log.i(TAG, "findItem: couldn't create Object");
	    		return -3;
	    	}
	    }

	    cursor.close();
		return newItem.getId();
	}
}
